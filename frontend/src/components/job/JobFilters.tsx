import React, { useState } from 'react';\nimport { ChevronDownIcon, ChevronUpIcon } from '@heroicons/react/24/outline';\n\ninterface JobCategory {\n  id: string;\n  name: string;\n  slug: string;\n  jobCount: number;\n}\n\ninterface JobFiltersProps {\n  values: {\n    search?: string;\n    categoryId?: string;\n    location?: string;\n    remoteType?: string[];\n    employmentType?: string[];\n    experienceLevel?: string[];\n    salaryMin?: number;\n    salaryMax?: number;\n  };\n  onChange: (filters: any) => void;\n  categories: JobCategory[];\n}\n\nconst JobFilters: React.FC<JobFiltersProps> = ({ values, onChange, categories }) => {\n  const [expandedSections, setExpandedSections] = useState({\n    category: true,\n    location: true,\n    remoteType: true,\n    employmentType: true,\n    experienceLevel: true,\n    salary: true,\n  });\n\n  const toggleSection = (section: string) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [section]: !prev[section as keyof typeof prev]\n    }));\n  };\n\n  const handleLocationChange = (location: string) => {\n    onChange({ location: location || undefined });\n  };\n\n  const handleMultiSelectChange = (field: string, value: string, checked: boolean) => {\n    const currentValues = values[field as keyof typeof values] as string[] || [];\n    const newValues = checked\n      ? [...currentValues, value]\n      : currentValues.filter(v => v !== value);\n    onChange({ [field]: newValues.length > 0 ? newValues : undefined });\n  };\n\n  const handleSalaryChange = (field: 'salaryMin' | 'salaryMax', value: string) => {\n    const numValue = value ? parseInt(value) : undefined;\n    onChange({ [field]: numValue });\n  };\n\n  const FilterSection: React.FC<{\n    title: string;\n    sectionKey: string;\n    children: React.ReactNode;\n  }> = ({ title, sectionKey, children }) => {\n    const isExpanded = expandedSections[sectionKey as keyof typeof expandedSections];\n    \n    return (\n      <div className=\"border-b border-gray-200 pb-4 mb-4 last:border-b-0 last:pb-0 last:mb-0\">\n        <button\n          onClick={() => toggleSection(sectionKey)}\n          className=\"flex items-center justify-between w-full text-left text-sm font-medium text-gray-900 hover:text-gray-700\"\n        >\n          <span>{title}</span>\n          {isExpanded ? (\n            <ChevronUpIcon className=\"w-4 h-4\" />\n          ) : (\n            <ChevronDownIcon className=\"w-4 h-4\" />\n          )}\n        </button>\n        {isExpanded && (\n          <div className=\"mt-3 space-y-2\">\n            {children}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const CheckboxOption: React.FC<{\n    id: string;\n    label: string;\n    checked: boolean;\n    onChange: (checked: boolean) => void;\n    count?: number;\n  }> = ({ id, label, checked, onChange, count }) => (\n    <label className=\"flex items-center space-x-2 cursor-pointer\">\n      <input\n        type=\"checkbox\"\n        id={id}\n        checked={checked}\n        onChange={(e) => onChange(e.target.checked)}\n        className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n      />\n      <span className=\"text-sm text-gray-700 flex-1\">{label}</span>\n      {typeof count === 'number' && (\n        <span className=\"text-xs text-gray-400\">({count})</span>\n      )}\n    </label>\n  );\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Category Filter */}\n      {categories.length > 0 && (\n        <FilterSection title=\"Category\" sectionKey=\"category\">\n          <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n            {categories.map((category) => (\n              <CheckboxOption\n                key={category.id}\n                id={`category-${category.id}`}\n                label={category.name}\n                checked={values.categoryId === category.id}\n                onChange={(checked) => {\n                  onChange({ categoryId: checked ? category.id : undefined });\n                }}\n                count={category.jobCount}\n              />\n            ))}\n          </div>\n        </FilterSection>\n      )}\n\n      {/* Location Filter */}\n      <FilterSection title=\"Location\" sectionKey=\"location\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter city or region...\"\n          value={values.location || ''}\n          onChange={(e) => handleLocationChange(e.target.value)}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n        />\n      </FilterSection>\n\n      {/* Remote Type Filter */}\n      <FilterSection title=\"Work Type\" sectionKey=\"remoteType\">\n        {[\n          { value: 'office', label: 'On-site' },\n          { value: 'remote', label: 'Remote' },\n          { value: 'hybrid', label: 'Hybrid' },\n        ].map((option) => (\n          <CheckboxOption\n            key={option.value}\n            id={`remote-${option.value}`}\n            label={option.label}\n            checked={values.remoteType?.includes(option.value) || false}\n            onChange={(checked) => \n              handleMultiSelectChange('remoteType', option.value, checked)\n            }\n          />\n        ))}\n      </FilterSection>\n\n      {/* Employment Type Filter */}\n      <FilterSection title=\"Employment Type\" sectionKey=\"employmentType\">\n        {[\n          { value: 'full_time', label: 'Full-time' },\n          { value: 'part_time', label: 'Part-time' },\n          { value: 'contract', label: 'Contract' },\n          { value: 'internship', label: 'Internship' },\n        ].map((option) => (\n          <CheckboxOption\n            key={option.value}\n            id={`employment-${option.value}`}\n            label={option.label}\n            checked={values.employmentType?.includes(option.value) || false}\n            onChange={(checked) => \n              handleMultiSelectChange('employmentType', option.value, checked)\n            }\n          />\n        ))}\n      </FilterSection>\n\n      {/* Experience Level Filter */}\n      <FilterSection title=\"Experience Level\" sectionKey=\"experienceLevel\">\n        {[\n          { value: 'entry', label: 'Entry Level' },\n          { value: 'mid', label: 'Mid Level' },\n          { value: 'senior', label: 'Senior Level' },\n          { value: 'lead', label: 'Lead' },\n          { value: 'executive', label: 'Executive' },\n        ].map((option) => (\n          <CheckboxOption\n            key={option.value}\n            id={`experience-${option.value}`}\n            label={option.label}\n            checked={values.experienceLevel?.includes(option.value) || false}\n            onChange={(checked) => \n              handleMultiSelectChange('experienceLevel', option.value, checked)\n            }\n          />\n        ))}\n      </FilterSection>\n\n      {/* Salary Filter */}\n      <FilterSection title=\"Salary Range (USD)\" sectionKey=\"salary\">\n        <div className=\"space-y-3\">\n          <div>\n            <label htmlFor=\"salary-min\" className=\"block text-xs font-medium text-gray-700 mb-1\">\n              Minimum\n            </label>\n            <input\n              type=\"number\"\n              id=\"salary-min\"\n              placeholder=\"0\"\n              value={values.salaryMin || ''}\n              onChange={(e) => handleSalaryChange('salaryMin', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              min=\"0\"\n              step=\"1000\"\n            />\n          </div>\n          <div>\n            <label htmlFor=\"salary-max\" className=\"block text-xs font-medium text-gray-700 mb-1\">\n              Maximum\n            </label>\n            <input\n              type=\"number\"\n              id=\"salary-max\"\n              placeholder=\"No limit\"\n              value={values.salaryMax || ''}\n              onChange={(e) => handleSalaryChange('salaryMax', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              min=\"0\"\n              step=\"1000\"\n            />\n          </div>\n          <div className=\"flex flex-wrap gap-1 text-xs\">\n            {[\n              { min: 50000, max: 75000, label: '50-75K' },\n              { min: 75000, max: 100000, label: '75-100K' },\n              { min: 100000, max: 150000, label: '100-150K' },\n              { min: 150000, max: undefined, label: '150K+' },\n            ].map((range) => (\n              <button\n                key={range.label}\n                onClick={() => {\n                  onChange({\n                    salaryMin: range.min,\n                    salaryMax: range.max,\n                  });\n                }}\n                className=\"px-2 py-1 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors\"\n              >\n                {range.label}\n              </button>\n            ))}\n          </div>\n        </div>\n      </FilterSection>\n    </div>\n  );\n};\n\nexport default JobFilters;