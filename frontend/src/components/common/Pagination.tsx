import React from 'react';\nimport { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/outline';\n\ninterface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n  onPageChange: (page: number) => void;\n  hasNext: boolean;\n  hasPrev: boolean;\n  maxVisiblePages?: number;\n}\n\nconst Pagination: React.FC<PaginationProps> = ({\n  currentPage,\n  totalPages,\n  onPageChange,\n  hasNext,\n  hasPrev,\n  maxVisiblePages = 7,\n}) => {\n  // Generate array of page numbers to display\n  const getVisiblePages = () => {\n    const pages: (number | string)[] = [];\n    \n    if (totalPages <= maxVisiblePages) {\n      // Show all pages if total is less than max visible\n      for (let i = 1; i <= totalPages; i++) {\n        pages.push(i);\n      }\n    } else {\n      // Always show first page\n      pages.push(1);\n      \n      const startPage = Math.max(2, currentPage - 2);\n      const endPage = Math.min(totalPages - 1, currentPage + 2);\n      \n      // Add ellipsis if needed\n      if (startPage > 2) {\n        pages.push('...');\n      }\n      \n      // Add middle pages\n      for (let i = startPage; i <= endPage; i++) {\n        pages.push(i);\n      }\n      \n      // Add ellipsis if needed\n      if (endPage < totalPages - 1) {\n        pages.push('...');\n      }\n      \n      // Always show last page\n      if (totalPages > 1) {\n        pages.push(totalPages);\n      }\n    }\n    \n    return pages;\n  };\n\n  const visiblePages = getVisiblePages();\n\n  const PageButton: React.FC<{\n    page: number | string;\n    isActive?: boolean;\n    disabled?: boolean;\n    onClick?: () => void;\n  }> = ({ page, isActive = false, disabled = false, onClick }) => {\n    const baseClasses = \"relative inline-flex items-center px-4 py-2 text-sm font-medium transition-colors\";\n    const activeClasses = \"z-10 bg-blue-600 text-white focus:z-20\";\n    const inactiveClasses = \"bg-white text-gray-500 hover:bg-gray-50 focus:z-20\";\n    const disabledClasses = \"bg-white text-gray-300 cursor-not-allowed\";\n    \n    const classes = `${baseClasses} ${\n      isActive ? activeClasses : disabled ? disabledClasses : inactiveClasses\n    } border border-gray-300`;\n    \n    if (typeof page === 'string') {\n      return (\n        <span className={`${baseClasses} bg-white text-gray-500 border border-gray-300 cursor-default`}>\n          {page}\n        </span>\n      );\n    }\n    \n    return (\n      <button\n        type=\"button\"\n        onClick={onClick}\n        disabled={disabled}\n        className={classes}\n        aria-current={isActive ? 'page' : undefined}\n      >\n        {page}\n      </button>\n    );\n  };\n\n  if (totalPages <= 1) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex items-center justify-between\">\n      {/* Mobile pagination info */}\n      <div className=\"flex flex-1 justify-between sm:hidden\">\n        <button\n          onClick={() => onPageChange(currentPage - 1)}\n          disabled={!hasPrev}\n          className=\"relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:bg-gray-100 disabled:text-gray-400 disabled:cursor-not-allowed\"\n        >\n          Previous\n        </button>\n        <button\n          onClick={() => onPageChange(currentPage + 1)}\n          disabled={!hasNext}\n          className=\"relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:bg-gray-100 disabled:text-gray-400 disabled:cursor-not-allowed\"\n        >\n          Next\n        </button>\n      </div>\n      \n      {/* Desktop pagination */}\n      <div className=\"hidden sm:flex sm:flex-1 sm:items-center sm:justify-between\">\n        <div>\n          <p className=\"text-sm text-gray-700\">\n            Showing page{' '}\n            <span className=\"font-medium\">{currentPage}</span>{' '}\n            of{' '}\n            <span className=\"font-medium\">{totalPages}</span>\n          </p>\n        </div>\n        <div>\n          <nav className=\"isolate inline-flex -space-x-px rounded-md shadow-sm\" aria-label=\"Pagination\">\n            {/* Previous button */}\n            <button\n              onClick={() => onPageChange(currentPage - 1)}\n              disabled={!hasPrev}\n              className=\"relative inline-flex items-center rounded-l-md border border-gray-300 bg-white px-2 py-2 text-gray-400 hover:bg-gray-50 focus:z-20 disabled:bg-gray-100 disabled:text-gray-300 disabled:cursor-not-allowed\"\n              aria-label=\"Previous page\"\n            >\n              <ChevronLeftIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n            </button>\n            \n            {/* Page numbers */}\n            {visiblePages.map((page, index) => (\n              <PageButton\n                key={index}\n                page={page}\n                isActive={page === currentPage}\n                onClick={typeof page === 'number' ? () => onPageChange(page) : undefined}\n              />\n            ))}\n            \n            {/* Next button */}\n            <button\n              onClick={() => onPageChange(currentPage + 1)}\n              disabled={!hasNext}\n              className=\"relative inline-flex items-center rounded-r-md border border-gray-300 bg-white px-2 py-2 text-gray-400 hover:bg-gray-50 focus:z-20 disabled:bg-gray-100 disabled:text-gray-300 disabled:cursor-not-allowed\"\n              aria-label=\"Next page\"\n            >\n              <ChevronRightIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n            </button>\n          </nav>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Pagination;