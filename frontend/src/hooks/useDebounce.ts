import { useState, useEffect } from 'react';\n\n/**\n * Custom hook that debounces a value\n * Useful for search inputs to avoid making API calls on every keystroke\n */\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\n/**\n * Hook that debounces a callback function\n */\nexport function useDebouncedCallback<T extends (...args: any[]) => any>(\n  callback: T,\n  delay: number\n): T {\n  const [debounceTimer, setDebounceTimer] = useState<NodeJS.Timeout | null>(null);\n\n  const debouncedCallback = ((...args: Parameters<T>) => {\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n\n    const timer = setTimeout(() => {\n      callback(...args);\n    }, delay);\n\n    setDebounceTimer(timer);\n  }) as T;\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (debounceTimer) {\n        clearTimeout(debounceTimer);\n      }\n    };\n  }, [debounceTimer]);\n\n  return debouncedCallback;\n}\n\nexport default useDebounce;